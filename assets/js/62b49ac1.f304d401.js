"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>y});var r=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),s=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,d=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=s(n),f=i,y=p["".concat(d,".").concat(f)]||p[f]||c[f]||a;return n?r.createElement(y,o(o({ref:t},u),{},{components:n})):r.createElement(y,o({ref:t},u))}));function y(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=f;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},38170:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(87462),i=(n(67294),n(3905));const a={sidebar_position:2},o="Querying Data",l={unversionedId:"handling-data/querying-data",id:"handling-data/querying-data",title:"Querying Data",description:"To query data, you must iterate over it in a for loop.",source:"@site/docs/handling-data/querying-data.md",sourceDirName:"handling-data",slug:"/handling-data/querying-data",permalink:"/Net/docs/handling-data/querying-data",draft:!1,editUrl:"https://github.com/YetAnotherClown/Net/edit/main/docs/handling-data/querying-data.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Sending Data",permalink:"/Net/docs/handling-data/sending-data"},next:{title:"Compressing Data",permalink:"/Net/docs/handling-data/compressing-data"}},d={},s=[{value:"Filtering Identifiers",id:"filtering-identifiers",level:2},{value:"Filtering Senders",id:"filtering-senders",level:2}],u={toc:s},p="wrapper";function c(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"querying-data"},"Querying Data"),(0,i.kt)("p",null,"To query data, you must iterate over it in a for loop.\nTo do this, you can either iterate over the ","[Net:query]"," method."),(0,i.kt)("p",null,"By using the ","[Net:query]"," method, the returned parameters will be: the position, the sender, the\nidentifier, and a tuple of the data."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"If you do not need to know the value of one of these parameters you can silence it by using ",(0,i.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,i.kt)("p",{parentName:"admonition"},"For example, since we do not need to know the identifier:"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local MyIdentifier = identifiers.MyIdentifier\n\nfor i, sender, _, args... in Net:query(MyIdentifier) do\n    -- Retrieves all packets with the specified identifier\nend\n"))),(0,i.kt)("h2",{id:"filtering-identifiers"},"Filtering Identifiers"),(0,i.kt)("p",null,"The ","[Net:query]"," method allows you to filter Identifiers by passing a tuple as an argument.\nSupplying no Identifier will return all packets, otherwise only packets of the Identifier will\nbe returned."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"local MyIdentifier = identifiers.MyIdentifier\nlocal MyOtherIdentifier = identifiers.MyOtherIdentifier\n\nfor i, sender, identifier, args... in Net:query(MyIdentifier, MyOtherIdentifier) do\n    -- Retrieves all packets with the specified identifiers\nend\n")),(0,i.kt)("h2",{id:"filtering-senders"},"Filtering Senders"),(0,i.kt)("p",null,"Sometimes you may also want to filter by the sender. You can do this by chaining ","[QueryResult:from]","\nonto the ","[Net:query]"," method and pass a tuple of Senders as the argument."),(0,i.kt)("p",null,"Any of the following types are recognized as a sender:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},"{ Player } | Player | Net.Server\n")),(0,i.kt)("p",null,"An example of this would be:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-lua"},'local Players = game:GetService("Players")\n\nlocal MyIdentifier = identifiers.MyIdentifier\n\nfor i, sender, identifier, args... in Net:query(MyIdentifier):from(Players) do\n    -- Retrieves all packets with the specified identifier and from the table of players\nend\n')))}c.isMDXComponent=!0}}]);