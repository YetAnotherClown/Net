"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),u=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},c="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=u(n),y=a,m=c["".concat(l,".").concat(y)]||c[y]||p[y]||o;return n?r.createElement(m,i(i({ref:t},d),{},{components:n})):r.createElement(m,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},13671:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>u});var r=n(87462),a=(n(67294),n(3905));const o={sidebar_position:2},i="Middleware",s={unversionedId:"getting-started/middleware",id:"getting-started/middleware",title:"Middleware",description:"Middleware is a powerful feature of Net that allows you to validate types and serialize/deserialize data before it is processed when sending and receiving data.",source:"@site/docs/getting-started/middleware.md",sourceDirName:"getting-started",slug:"/getting-started/middleware",permalink:"/Net/docs/getting-started/middleware",draft:!1,editUrl:"https://github.com/YetAnotherClown/Net/edit/main/docs/getting-started/middleware.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"defaultSidebar",previous:{title:"Routes",permalink:"/Net/docs/getting-started/routes"},next:{title:"Hooks",permalink:"/Net/docs/getting-started/hooks"}},l={},u=[{value:"Compression",id:"compression",level:2}],d={toc:u},c="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"middleware"},"Middleware"),(0,a.kt)("p",null,"Middleware is a powerful feature of Net that allows you to validate types and serialize/deserialize data before it is processed when sending and receiving data."),(0,a.kt)("p",null,"To create Middleware, you can specify a function in your Route's Configuration with a parameter for the event ",(0,a.kt)("inlineCode",{parentName:"p"},'"send" | "receive"')," and the data that is to be processed ",(0,a.kt)("inlineCode",{parentName:"p"},"U..."),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Net = require("Net.luau")\ntype Net<U...> = Net.Net<U...>\n\nlocal Route: Net<number, string, boolean> = Net.new({\n    Middleware = function(event, num, str, bool)\n        -- Do something\n\n        return num, str, bool\n    end\n})\n')),(0,a.kt)("p",null,"To validate your types, you can return the values in order to allow it to be processed, or you can drop the packet by returning ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),". Dropped packets will never reach your code, meaning you can ensure that the types your code receives are always the types you expect."),(0,a.kt)("h2",{id:"compression"},"Compression"),(0,a.kt)("p",null,"To compress/decompress your data, you can use a library like ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Data-Oriented-House/Squash"},"Squash")," to serialize and deserialize your data. Simply return the types in order as a tuple, you can use the event parameter to determine whether to compress or decompress your data."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-lua"},'local Squash = require("Squash.luau")\nlocal Net = require("Net.luau")\ntype Net<U...> = Net.Net<U...>\n\nlocal route: Net<string, number> = Net.new({\n    Channel = "Reliable",\n    Middleware = function(event: "send" | "receive", str, boolean)\n        local values: { any } = {}\n        local alphabet = Squash.string.alphabet(str)\n\n        -- Serialize Packets before sending\n        if event == "send" then\n            -- Type-check sent values,\n            -- Should be of the provided types U... in Net<U...>\n            if type(str) ~= "string" or type(boolean) ~= "boolean" then\n                return\n            end\n\n            values = {\n                Squash.string.ser(str, alphabet),\n                Squash.boolean.ser(boolean),\n            }\n        end\n\n        -- Deserialize Packets before returning\n        if event == "receive" then\n            -- Type-check returned values;\n            -- Squash serializes types into other types, like string\n            if type(str) ~= "string" or type(boolean) ~= "string" then\n                return\n            end\n\n            values = {\n                Squash.string.des(str, alphabet),\n                Squash.boolean.des(boolean),\n            }\n        end\n\n        return table.unpack(values)\n    end,\n})\n')))}p.isMDXComponent=!0}}]);